{
  "projectContext": {
    "businessDomain": {
      "name": "Travel Planning Backend",
      "coreFeatures": [
        "Trip Planning",
        "Itinerary Management",
        "Destination Information",
        "User Travel Preferences",
        "Travel Recommendations",
        "API Integration",
        "Data Synchronization"
      ],
      "keyEntities": [
        "User",
        "Trip",
        "Destination",
        "Itinerary",
        "Activity",
        "Accommodation",
        "Transportation",
        "Booking",
        "Review"
      ]
    },
    "packageManager": {
      "name": "pnpm",
      "version": ">=8.0.0",
      "lockFile": "pnpm-lock.yaml",
      "commands": {
        "install": "pnpm install",
        "add": "pnpm add",
        "remove": "pnpm remove",
        "run": "pnpm run",
        "test": "pnpm test",
        "build": "pnpm build",
        "start": "pnpm start"
      }
    },
    "codebasePatterns": {
      "namingConventions": {
        "files": "kebab-case",
        "classes": "PascalCase",
        "functions": "camelCase",
        "variables": "camelCase",
        "constants": "UPPER_SNAKE_CASE",
        "interfaces": "I{PascalCase}",
        "enums": "PascalCase"
      },
      "fileStructure": {
        "src": {
          "modules": "Feature modules with controllers, services, and DTOs",
          "common": "Shared components, guards, filters, and interceptors",
          "configs": "Application and environment configurations",
          "models": "Database models and schemas",
          "repositories": "Data access layer implementations",
          "interfaces": "TypeScript interfaces and types",
          "utils": "Helper functions and utilities",
          "pipes": "Custom validation and transformation pipes",
          "plugins": "NestJS plugins and extensions"
        },
        "test": {
          "unit": "Individual component tests",
          "integration": "Component interaction tests",
          "e2e": "End-to-end API tests"
        }
      }
    },
    "commonPatterns": {
      "errorHandling": {
        "customErrors": "Custom exception filters and error classes",
        "errorMiddleware": "Global exception filter",
        "errorCodes": "Standardized HTTP error codes"
      },
      "validation": {
        "input": "Class-validator decorators",
        "business": "Custom validation pipes",
        "data": "TypeORM validations"
      },
      "logging": {
        "levels": ["error", "warn", "info", "debug"],
        "format": "Structured JSON logging",
        "context": "Request ID, user ID, timestamp, correlation ID"
      }
    },
    "developmentGuidelines": {
      "codeQuality": {
        "complexity": "Keep functions under 20 lines",
        "nesting": "Maximum 3 levels of nesting",
        "comments": "Document complex logic and business rules",
        "types": "Strict TypeScript types and interfaces"
      },
      "testing": {
        "unitTests": "Test all services and controllers",
        "integrationTests": "Test module interactions",
        "e2eTests": "Test API endpoints",
        "coverage": "Minimum 80% coverage"
      },
      "documentation": {
        "api": "Swagger/OpenAPI documentation",
        "code": "JSDoc comments for complex functions",
        "architecture": "Keep ARCHITECTURE.md updated"
      }
    },
    "deploymentContext": {
      "environments": {
        "development": {
          "database": "Local PostgreSQL",
          "cache": "In-memory",
          "storage": "Local file system",
          "monitoring": "Local Prometheus & Grafana"
        },
        "staging": {
          "database": "RDS PostgreSQL",
          "cache": "ElastiCache Redis",
          "storage": "S3",
          "monitoring": "CloudWatch & Grafana"
        },
        "production": {
          "database": "RDS PostgreSQL with read replicas",
          "cache": "ElastiCache Redis cluster",
          "storage": "S3 with CloudFront",
          "monitoring": "CloudWatch, Prometheus & Grafana"
        }
      },
      "scaling": {
        "horizontal": "Multiple Lambda instances",
        "vertical": "Database read replicas",
        "caching": "Redis for frequent queries"
      }
    },
    "securityContext": {
      "authentication": {
        "jwt": {
          "algorithm": "RS256",
          "expiration": "1 hour",
          "refresh": "7 days"
        }
      },
      "authorization": {
        "roles": ["admin", "user", "guest"],
        "permissions": "Role-based access control",
        "guards": "Custom guards for route protection"
      },
      "dataProtection": {
        "encryption": "At-rest and in-transit",
        "sanitization": "Input sanitization",
        "validation": "Strict input validation",
        "rateLimiting": "Request rate limiting"
      }
    }
  }
}
